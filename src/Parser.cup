// Parser by Megan Lucas, Nadia Mahgerefteh and Stars Momodu
import java_cup.runtime.*;
import Lexer.java;

parser code {:

  Boolean syntaxErrors = false;
  Lexer lexer;

  public Parser(Lexer lex) {
    this.lexer = lex;
  } 

  public void syntax_error(Symbol current_token) { report_error(
     "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null );
  }
:}

scan with {: return lexer.next_token(); :};

/* -----------------------------------------------------------------------------------------
 * Terminals
 * -----------------------------------------------------------------------------------------
 */
terminal            SEMI, PLUS, MINUS, TIMES, UMINUS, LPAREN, RPAREN;
terminal Integer    NUMBER;        // our scanner provides numbers as integers

/* -----------------------------------------------------------------------------------------
 * Non Terminals
 * -----------------------------------------------------------------------------------------
 */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions

/* -----------------------------------------------------------------------------------------
 * Precedences
 * -----------------------------------------------------------------------------------------
 */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

/* -----------------------------------------------------------------------------------------
 * Rules
 * -----------------------------------------------------------------------------------------
 */
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e);:}
            | expr:e SEMI                   {: System.out.println(e);:}
;
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;       :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;       :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;       :}
             | MINUS expr:e                 {: RESULT = -e;          :}
  	     %prec UMINUS
       | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
       | NUMBER:n	                     {: RESULT = n;           :}
             ;