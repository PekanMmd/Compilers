// Parser by Megan Lucas, Nadia Mahgerefteh and Stars Momodu
import java_cup.runtime.*;

parser code {:

  Boolean syntaxErrors = false;
  Lexer lexer;

  public Parser(Lexer lex) {
    this.lexer = lex;
  } 

  public void syntax_error(Symbol current_token) { report_error(
     "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null );
      syntaxErrors = true;
  }
:}

scan with {: return lexer.next_token(); :};

/* -----------------------------------------------------------------------------------------
 * Terminals
 * -----------------------------------------------------------------------------------------
 */

// ----OTHER----
terminal ERROR, ID, LEN;


// ----PUNCTUATION----

      //  Brackets
      terminal  BRACKET_L, BRACKET_R, BRACKET_SL, BRACKET_SR, ANGLE_R, ANGLE_L, CURLY_R, CURLY_L;
      
      //  Other
      terminal  SEMICOLON, COLON, DOT, COMMA, QUES_MARK;     


// ----KEYWORDS----

      //  Declaration
      terminal  ALIAS, TDEF, FDEF, MAIN;

      //  Control Flow
      terminal  IF, FI, THEN, ELSE, LOOP, POOL, RETURN, BREAK;
      
      //  IO
      terminal  READ, PRINT;


// ----DATA TYPES----

      //  Primitive
      terminal  TYPE_BOOL, TYPE_INT, TYPE_FLOAT, TYPE_RAT, TYPE_CHAR;

      //  Aggregate
      terminal  TYPE_STR, DICT, SEQ;

      //  Other
      terminal  TOP;

// ----LITERALS----

      //  Primitive
      terminal  LIT_BOOL, LIT_POS_INT, LIT_NEG_INT, LIT_CHAR, LIT_FLOAT, LIT_RAT;

      //  Aggregate
      terminal  LIT_STRING;

      //  Other
      terminal  NULL;

// ----OPERATORS----

      //  Boolean Operators
      terminal  NOT, AND, OR, IMPLIES;

      //  Numeric Operators
      terminal  PLUS, MINUS, MULTIPLY, DIVIDE, POWER;

      //  Dictionary/Sequence Operators
      terminal  IN, CONCAT;

      //  Comparison Operators
      terminal  LESS_OR_EQ, EQUAL, NOT_EQUAL;

      //  Other
      terminal ASSIGNMENT;

      
/* -----------------------------------------------------------------------------------------
 * Non Terminals
 * -----------------------------------------------------------------------------------------
 */



// ----˜Z PROGRAM----
  non terminal        Z_Program;



// ----DECLARATIONS----
  non terminal        Declaration, Declaration_list;

  // functions
  non terminal        Declaration_function, Declaration_main;

  // types
  non terminal        Declaration_type, Declaration_type_alias;

  // parameters
  non terminal        Parameter, Parameter_list;

  // variables
  non terminal        Declaration_variable, Declaration_variable_assignment;



// ----FUNCTION DECLARATIONS----
  non terminal        Function_body;



// ----STATEMENTS----

  non terminal        Statement, Statement_list;

  // control flow
  non terminal        Statement_control_flow, Statement_if, Statement_if_else, Statement_loop;

  // actions
  non terminal        Statement_return, Statement_break, Statement_assignment, Statement_conditioned_function_call;

  // input/output
  non terminal        Statement_IO, Statement_input, Statement_output;



// ----EXPRESSIONS----
  non terminal        Expression, Expression_list;

  // operators
  non terminal        Expression_boolean, Expression_numeric, Expression_sequence;

  // types
  non terminal        Expression_unknown;

  // functions and fields
  non terminal        Expression_function_predicate, Expression_function_call, Expression_conditioned_function_call, Expression_field_reference, Expression_sequence_length;

  // aggregate type value reference
  non terminal        Expression_dictionary_sequence_index; 

  // sequence slice
  non terminal        Expression_sequence_slice, Expression_sequence_left_slice, Expression_sequence_right_slice, Expression_sequence_dual_slice, Expression_sequence_empty_slice;


// ----LITERALS----
  non terminal        Literal;

  // primitive literals
  non terminal        Literal_Integer;

  // aggregate literals
  non terminal        Literal_dictionary, Dictionary_entry, Dictionary_entry_list, Literal_sequence;


// ----TYPES----
  non terminal        Type; 

  // Type grouping
  non terminal        Type_primitive, Type_number, Type_aggregate; // defined type includes aliases

  // aggregate types
  non terminal        Type_dictionary, Type_sequence;


// ----OPERATORS----

  // binary
  non terminal        Operator_binary_boolean, Operator_binary_comparison, Operator_binary_numeric;

  // unary
  non terminal        Operator_unary_boolean;


/* -----------------------------------------------------------------------------------------
 * Precedences
 * -----------------------------------------------------------------------------------------
 */
precedence left       ASSIGNMENT;
precedence left       COLON;
precedence left       OR, IMPLIES;
precedence nonassoc   ANGLE_L, LESS_OR_EQ, EQUAL, NOT_EQUAL;
precedence left       PLUS, MINUS;
precedence left       DIVIDE, MULTIPLY, AND;
precedence left       POWER;
precedence left       DOT, CONCAT, IN;
precedence left       BRACKET_SL, BRACKET_SR;
precedence left       NOT;
precedence left       BRACKET_L, BRACKET_R;
precedence left       SEMICOLON;


/* -----------------------------------------------------------------------------------------
 * Rules
 * -----------------------------------------------------------------------------------------
 */

start with Z_Program;

// ----˜Z PROGRAM----
Z_Program ::= Declaration_main
            | Declaration Z_Program
            | Declaration_main Declaration
            | Declaration_main Declaration Declaration
            | Declaration_main Declaration Declaration Declaration
            | Declaration_main Declaration Declaration Declaration Declaration
            ;
       
// ----DECLARATIONS----
Declaration ::= Declaration_function
              | Declaration_type
              | Declaration_type_alias
              | Declaration_variable
              ;

Declaration_variable ::= ID COLON Type Declaration_variable_assignment SEMICOLON;
Declaration_variable_assignment ::= ASSIGNMENT Expression_list | ;

Declaration_list ::= Declaration Declaration_list;


// functions
Declaration_function ::= FDEF ID BRACKET_L Parameter_list BRACKET_R CURLY_L Function_body CURLY_R SEMICOLON 
                       | FDEF ID BRACKET_L Parameter_list BRACKET_R CURLY_L Function_body CURLY_R COLON Type SEMICOLON
                       | FDEF ID BRACKET_L BRACKET_R CURLY_L Function_body CURLY_R SEMICOLON 
                       | FDEF ID BRACKET_L BRACKET_R CURLY_L Function_body CURLY_R COLON Type SEMICOLON
                       ;

Declaration_main ::= MAIN CURLY_L Function_body CURLY_R SEMICOLON;

// types
Declaration_type ::= TDEF ID CURLY_L Parameter_list CURLY_R SEMICOLON;

Declaration_type_alias ::= ALIAS Type ID SEMICOLON;

// parameters
Parameter ::= ID COLON Type;

Parameter_list ::= Parameter COMMA Parameter_list
                 | Parameter;



// ----FUNCTION DECLARATIONS----
Function_body ::= Declaration Function_body
                | Statement_list
                ;


// ----STATEMENTS----
Statement ::= Statement_control_flow
            | Statement_IO
            | Statement_assignment
            | Statement_conditioned_function_call
            | Statement_return
            | Statement_break
            ;

Statement_list ::= Statement Statement_list
                 | Statement
                 ;

// control flow
Statement_control_flow ::= Statement_if
                         | Statement_if_else
                         | Statement_loop
                         ;

Statement_if ::= IF BRACKET_L Expression BRACKET_R THEN Statement_list FI;
                                      
Statement_if_else ::= IF BRACKET_L Expression BRACKET_R THEN Statement_list ELSE Statement_list FI;

Statement_loop ::= LOOP Statement_list POOL;

// actions
Statement_break ::= BREAK SEMICOLON
                  | BREAK LIT_POS_INT SEMICOLON
                  ;

Statement_return ::= RETURN Expression SEMICOLON
                   | RETURN SEMICOLON;

Statement_assignment ::= ID ASSIGNMENT Expression SEMICOLON
                       | Expression ASSIGNMENT Expression SEMICOLON
                       ;

Statement_conditioned_function_call ::= Expression_conditioned_function_call SEMICOLON;

// input/output
Statement_IO ::= Statement_input
               | Statement_output
               ;

Statement_input ::= READ ID SEMICOLON;

Statement_output ::= PRINT Expression SEMICOLON;

// ----EXPRESSIONS----
Expression ::= Expression_boolean 
             | Expression_numeric
             | Expression_sequence
             | Expression_unknown
             | Literal
             ;

Expression_list ::= Expression COMMA Expression_list
                  | Expression
                  ;

// operators
Expression_boolean ::= Expression Operator_binary_boolean Expression
                     | Operator_unary_boolean Expression
                     | Expression IN Expression
                     | Expression Operator_binary_comparison Expression
                     ;

Expression_numeric ::= Expression Operator_binary_numeric Expression
                     | Expression_sequence_length
                     | MINUS LIT_POS_INT
                     | MINUS LIT_RAT
                     | MINUS LIT_FLOAT
                     ;

Expression_sequence ::= Expression_sequence_slice
                      | Expression CONCAT Expression
                      ;

Expression_unknown ::= ID
                     | Expression_field_reference
                     | Expression_conditioned_function_call
                     | Expression_dictionary_sequence_index
                     ;

// functions and fields
Expression_function_predicate ::= QUES_MARK Expression QUES_MARK;

Expression_function_call ::= ID BRACKET_L Expression_list BRACKET_R;

Expression_conditioned_function_call ::= Expression_function_predicate Expression_function_call;

Expression_field_reference ::= Expression DOT ID;

Expression_sequence_length ::= Expression DOT LEN;

Expression_sequence_length ::= Expression_sequence DOT LEN;

// aggregate type value reference
Expression_dictionary_sequence_index ::= Expression BRACKET_SL Expression BRACKET_SR;

// sequence slice
Expression_sequence_slice ::= Expression_sequence_left_slice
                            | Expression_sequence_right_slice
                            | Expression_sequence_dual_slice
                            | Expression_sequence_empty_slice
                            ;


Expression_sequence_left_slice  ::= Expression BRACKET_SL LIT_POS_INT COLON BRACKET_SR;
Expression_sequence_right_slice ::= Expression BRACKET_SL COLON Expression BRACKET_SR;
Expression_sequence_dual_slice  ::= Expression BRACKET_SL LIT_POS_INT COLON Expression BRACKET_SR;
Expression_sequence_empty_slice ::= Expression BRACKET_SL COLON BRACKET_SR;



// ----LITERALS----
Literal ::= Literal_Integer
          | LIT_RAT
          | LIT_FLOAT
          | LIT_BOOL
          | LIT_CHAR
          | Literal_dictionary
          | Literal_sequence
          | NULL
          ;

// primitive literals
Literal_Integer ::= LIT_POS_INT
                  | LIT_NEG_INT
                  ;

// aggregate literals

Dictionary_entry ::= Expression COLON Expression;

Dictionary_entry_list ::= Dictionary_entry COMMA Dictionary_entry_list
                        | Dictionary_entry
                        ;

Literal_dictionary ::= CURLY_L Dictionary_entry_list CURLY_R
                     | CURLY_L CURLY_R
                     ;

Literal_sequence ::= BRACKET_SL Expression_list BRACKET_SR
                   | BRACKET_SL BRACKET_SR
                   | LIT_STRING
                   ;

// ----TYPES----
Type ::= Type_primitive
       | Type_aggregate
       | ID
       | TOP
       ;

// Type grouping
Type_primitive ::= Type_number
                 | TYPE_CHAR
                 | TYPE_BOOL
                 ;

Type_number ::= TYPE_INT
              | TYPE_FLOAT
              | TYPE_RAT
              ;

Type_aggregate ::= Type_sequence
                 | TYPE_STR
                 | Type_dictionary
                 ;

// aggregate types
Type_dictionary ::= DICT ANGLE_L Type COMMA Type ANGLE_R;

Type_sequence ::= SEQ ANGLE_L Type ANGLE_R;


// ----OPERATORS----

// binary
Operator_binary_boolean ::= AND
                          | OR
                          | IMPLIES
                          ;

Operator_binary_comparison ::= ANGLE_L // less than
                             | LESS_OR_EQ
                             | EQUAL
                             | NOT_EQUAL
                             ;


Operator_binary_numeric ::= PLUS
                          | MINUS
                          | MULTIPLY
                          | DIVIDE
                          | POWER
                          ;

// unary
Operator_unary_boolean ::= NOT;




































             